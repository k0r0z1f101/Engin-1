//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input Actions/ParticleControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputParticleControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputParticleControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ParticleControl"",
    ""maps"": [
        {
            ""name"": ""ParticleControl"",
            ""id"": ""6ac5e628-ff83-4a79-bd3b-d98a06a5a7f9"",
            ""actions"": [
                {
                    ""name"": ""Play"",
                    ""type"": ""Button"",
                    ""id"": ""68370993-3067-4892-b332-5fdef742e172"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stop"",
                    ""type"": ""Button"",
                    ""id"": ""b2424e7f-37f7-4c0e-ba95-9e77cb1c53fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""171b9a28-cfc0-4a75-a0a0-f14a7c462717"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deactivate"",
                    ""type"": ""Button"",
                    ""id"": ""69ef54ef-79e9-4930-bcea-b69a746cbf5b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8dea830-9f6b-4520-a8d1-7241ee2a0bf4"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94e84cd0-aeb3-4caa-a6e9-72e924fb131e"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33cf93e5-d921-47c2-96a6-b6a1265360b1"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0547af95-81e1-4f56-a22c-e6f6d88ca7b9"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Deactivate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ParticleControl
        m_ParticleControl = asset.FindActionMap("ParticleControl", throwIfNotFound: true);
        m_ParticleControl_Play = m_ParticleControl.FindAction("Play", throwIfNotFound: true);
        m_ParticleControl_Stop = m_ParticleControl.FindAction("Stop", throwIfNotFound: true);
        m_ParticleControl_Pause = m_ParticleControl.FindAction("Pause", throwIfNotFound: true);
        m_ParticleControl_Deactivate = m_ParticleControl.FindAction("Deactivate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ParticleControl
    private readonly InputActionMap m_ParticleControl;
    private IParticleControlActions m_ParticleControlActionsCallbackInterface;
    private readonly InputAction m_ParticleControl_Play;
    private readonly InputAction m_ParticleControl_Stop;
    private readonly InputAction m_ParticleControl_Pause;
    private readonly InputAction m_ParticleControl_Deactivate;
    public struct ParticleControlActions
    {
        private @InputParticleControl m_Wrapper;
        public ParticleControlActions(@InputParticleControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Play => m_Wrapper.m_ParticleControl_Play;
        public InputAction @Stop => m_Wrapper.m_ParticleControl_Stop;
        public InputAction @Pause => m_Wrapper.m_ParticleControl_Pause;
        public InputAction @Deactivate => m_Wrapper.m_ParticleControl_Deactivate;
        public InputActionMap Get() { return m_Wrapper.m_ParticleControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ParticleControlActions set) { return set.Get(); }
        public void SetCallbacks(IParticleControlActions instance)
        {
            if (m_Wrapper.m_ParticleControlActionsCallbackInterface != null)
            {
                @Play.started -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnPlay;
                @Play.performed -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnPlay;
                @Play.canceled -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnPlay;
                @Stop.started -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnStop;
                @Stop.performed -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnStop;
                @Stop.canceled -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnStop;
                @Pause.started -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnPause;
                @Deactivate.started -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnDeactivate;
                @Deactivate.performed -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnDeactivate;
                @Deactivate.canceled -= m_Wrapper.m_ParticleControlActionsCallbackInterface.OnDeactivate;
            }
            m_Wrapper.m_ParticleControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Play.started += instance.OnPlay;
                @Play.performed += instance.OnPlay;
                @Play.canceled += instance.OnPlay;
                @Stop.started += instance.OnStop;
                @Stop.performed += instance.OnStop;
                @Stop.canceled += instance.OnStop;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Deactivate.started += instance.OnDeactivate;
                @Deactivate.performed += instance.OnDeactivate;
                @Deactivate.canceled += instance.OnDeactivate;
            }
        }
    }
    public ParticleControlActions @ParticleControl => new ParticleControlActions(this);
    public interface IParticleControlActions
    {
        void OnPlay(InputAction.CallbackContext context);
        void OnStop(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnDeactivate(InputAction.CallbackContext context);
    }
}
